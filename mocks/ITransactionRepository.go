// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "assignment-golang-backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// ITransactionRepository is an autogenerated mock type for the ITransactionRepository type
type ITransactionRepository struct {
	mock.Mock
}

// CountTransactionByWalletNumber provides a mock function with given fields: _a0, _a1
func (_m *ITransactionRepository) CountTransactionByWalletNumber(_a0 int, _a1 string) int {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: _a0
func (_m *ITransactionRepository) CreateTransaction(_a0 *entity.Transaction) (*entity.Transaction, int, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(*entity.Transaction) *entity.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*entity.Transaction) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*entity.Transaction) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByWalletNumberWithQuery provides a mock function with given fields: _a0, _a1
func (_m *ITransactionRepository) FindByWalletNumberWithQuery(_a0 int, _a1 *entity.Pagination) ([]*entity.Transaction, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*entity.Transaction
	if rf, ok := ret.Get(0).(func(int, *entity.Pagination) []*entity.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, *entity.Pagination) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, *entity.Pagination) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewITransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITransactionRepository creates a new instance of ITransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITransactionRepository(t mockConstructorTestingTNewITransactionRepository) *ITransactionRepository {
	mock := &ITransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
