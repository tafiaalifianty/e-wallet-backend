// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "assignment-golang-backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IWalletRepository is an autogenerated mock type for the IWalletRepository type
type IWalletRepository struct {
	mock.Mock
}

// CreateWallet provides a mock function with given fields: _a0
func (_m *IWalletRepository) CreateWallet(_a0 *entity.Wallet) (*entity.Wallet, int, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(*entity.Wallet) *entity.Wallet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*entity.Wallet) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*entity.Wallet) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DecrementBalanceByValue provides a mock function with given fields: _a0, _a1
func (_m *IWalletRepository) DecrementBalanceByValue(_a0 int, _a1 int) (*entity.Wallet, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(int, int) *entity.Wallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByNumber provides a mock function with given fields: _a0
func (_m *IWalletRepository) FindByNumber(_a0 int) (*entity.Wallet, int, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(int) *entity.Wallet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IncrementBalanceByValue provides a mock function with given fields: _a0, _a1
func (_m *IWalletRepository) IncrementBalanceByValue(_a0 int, _a1 int) (*entity.Wallet, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(int, int) *entity.Wallet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIWalletRepository creates a new instance of IWalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIWalletRepository(t mockConstructorTestingTNewIWalletRepository) *IWalletRepository {
	mock := &IWalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
