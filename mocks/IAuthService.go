// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "assignment-golang-backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *IAuthService) Login(_a0 string, _a1 string) (*entity.Token, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Token
	if rf, ok := ret.Get(0).(func(string, string) *entity.Token); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *IAuthService) Register(_a0 *entity.User) (*entity.Token, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Token
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.Token); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthService(t mockConstructorTestingTNewIAuthService) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
